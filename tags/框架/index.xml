<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>框架 on 神威空间</title>
    <link>/tags/%E6%A1%86%E6%9E%B6.html</link>
    <description>Recent content in 框架 on 神威空间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 27 Aug 2020 17:01:03 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实习小结</title>
      <link>/post/%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93.html</link>
      <pubDate>Thu, 27 Aug 2020 17:01:03 +0800</pubDate>
      
      <guid>/post/%E5%AE%9E%E4%B9%A0%E5%B0%8F%E7%BB%93.html</guid>
      <description>Promise 主要解决回调地狱，状态pending resolved rejected
const newPromise = new Promise((resolve,reject) =&amp;gt; { //pending阶段要做的事，同步执行  //判断如何通向resovle或reject状态，从而异步执行resovle(data)或reject(error) }); newPromise.then( (data) =&amp;gt; { 当newPromise的状态变成fulfilled后，该函数立即执行 这里写通向fulfilled状态后要做的事情 }, (error) =&amp;gt; { 当newPromise的状态变成rejected后，该函数立即执行 这里写通向rejected状态后要做的事情 } ); async 位于函数字面量或函数表达式的前面，被修饰函数执行后会返回一个promise对象
async function chloe(){ console.log(&amp;#39;chloe&amp;#39;); return 20; } // ======== 等价于 function chloe(){ return new Promise((resolve,reject)=&amp;gt;{ console.log(&amp;#39;chole&amp;#39;); resolve(20); }) } await 位于async函数内部，一般位于promise对象之前，会拿到该对象的结果，即resolve 和 reject的参数，如果不是promise对象则会用Promise.resolve包装后返回对应的值。会强制等待至拿到结果
async function chloe(){ console.log(&amp;#39;chloe&amp;#39;); return 20; } async function taran(){ //chole函数执行并返回一个Promise对象，await拿到其resolve参数20  const age = await chloe(); console.</description>
    </item>
    
  </channel>
</rss>